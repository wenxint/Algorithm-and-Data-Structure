/**
 * LeetCode 087: 打家劫舍 (House Robber)
 *
 * 题目描述：
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
 * 影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
 * 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下，一夜之内能够偷窃到的最高金额。
 *
 * 核心思想：
 * 动态规划 - 对每间房屋选择偷或不偷，不能偷相邻房屋
 *
 * 算法原理：
 * 1. 状态定义：dp[i]表示前i间房屋能偷到的最大金额
 * 2. 状态转移：dp[i] = max(dp[i-1], dp[i-2] + nums[i])
 * 3. 初始状态：dp[0] = nums[0], dp[1] = max(nums[0], nums[1])
 * 4. 空间优化：只需要记录前两个状态
 */

// TODO: 待实现
// 预计包含以下解法：
// 1. 动态规划法（推荐）
// 2. 空间优化版本
// 3. 递归记忆化
// 解决线性DP的经典问题

module.exports = {
    // 主要解法将在这里实现
};
