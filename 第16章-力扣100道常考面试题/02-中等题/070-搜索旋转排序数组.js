/**
 * LeetCode 070: 搜索旋转排序数组 (Search in Rotated Sorted Array)
 *
 * 题目描述：
 * 整数数组 nums 按升序排列，数组中的值互不相同。
 * 在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了旋转，
 * 使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]。
 * 例如，[0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2]。
 * 给你旋转后的数组 nums 和一个整数 target，如果 nums 中存在这个目标值 target，则返回它的下标，否则返回 -1。
 *
 * 核心思想：
 * 二分查找变形 - 利用旋转数组的部分有序性
 *
 * 算法原理：
 * 1. 旋转数组必有一半是有序的
 * 2. 判断target在有序的一半还是无序的一半
 * 3. 在有序的一半可以直接二分查找
 * 4. 在无序的一半继续递归处理
 */

// TODO: 待实现
// 预计包含以下解法：
// 1. 二分查找法（推荐）
// 2. 线性搜索法
// 解决旋转数组查找的二分查找变形问题

module.exports = {
    // 主要解法将在这里实现
};