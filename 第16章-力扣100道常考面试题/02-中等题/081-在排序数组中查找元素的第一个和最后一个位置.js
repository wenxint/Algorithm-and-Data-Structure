/**
 * LeetCode 081: 在排序数组中查找元素的第一个和最后一个位置 (Find First and Last Position of Element in Sorted Array)
 *
 * 题目描述：
 * 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。
 * 请你找出给定目标值在数组中的开始位置和结束位置。
 * 如果数组中不存在目标值 target，返回 [-1, -1]。
 * 你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。
 *
 * 核心思想：
 * 二分查找变形 - 分别查找左边界和右边界
 *
 * 算法原理：
 * 1. 使用二分查找找到目标值的左边界（第一次出现的位置）
 * 2. 使用二分查找找到目标值的右边界（最后一次出现的位置）
 * 3. 左边界查找：当nums[mid] >= target时，向左收缩
 * 4. 右边界查找：当nums[mid] <= target时，向右扩展
 */

// TODO: 待实现
// 预计包含以下解法：
// 1. 两次二分查找（推荐）
// 2. 一次二分查找扩展
// 3. 线性搜索法
// 解决二分查找边界问题的经典应用

module.exports = {
    // 主要解法将在这里实现
};
